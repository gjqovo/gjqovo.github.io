<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gjqovo.github.io/</id><title>就是Van</title><subtitle>A personal blog.</subtitle> <updated>2023-03-08T12:33:26+00:00</updated> <author> <name>Gjq</name> <uri>https://gjqovo.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gjqovo.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://gjqovo.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Gjq </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>DST MOD</title><link href="https://gjqovo.github.io/posts/DST-MOD/" rel="alternate" type="text/html" title="DST MOD" /><published>2023-03-03T14:49:12+00:00</published> <updated>2023-03-07T15:56:53+00:00</updated> <id>https://gjqovo.github.io/posts/DST-MOD/</id> <content src="https://gjqovo.github.io/posts/DST-MOD/" /> <author> <name>Gjq</name> </author> <category term="learn" /> <category term="DST" /> <category term="MOD" /> <category term="Lua" /> <summary> 本文主要记录饥荒联机版MOD制作过程以及LUA程序设计语言的学习过程。 MOD入门 Dont Starve Together的安装位置里有一个mods文件夹，后面开发的mod都是放在这个目录下进行测试 文件介绍 modinfo.lua：定义mod的基本信息（比如名字，版本，描述等）另外它里面还可以添加mod的配置信息 modmain.lua：游戏启动时会自动加载的文件，在里面可以调用饥荒暴露出来的api 创建mod 在DST安装目录下的mods文件夹里创建一个文件夹，比如 quick-start 切记，文件夹名不要以workshop-开头 然后在 quick-start 里添加两个文件 modinfo.lua modmain.lua modinfo.lua -- 名称 name = "Quick Start" -- 描述 description = "... </summary> </entry> <entry><title>C语言：宏</title><link href="https://gjqovo.github.io/posts/clang-macro/" rel="alternate" type="text/html" title="C语言：宏" /><published>2022-09-21T16:47:35+00:00</published> <updated>2023-03-08T12:15:49+00:00</updated> <id>https://gjqovo.github.io/posts/clang-macro/</id> <content src="https://gjqovo.github.io/posts/clang-macro/" /> <author> <name>me</name> </author> <category term="learn" /> <category term="clang" /> <summary> 虽然在较为现代的编程语言中，宏是个很少见的概念，C++虽然兼容C语法而保留了宏的概念，但也并不提倡使用宏。并且宏也是导致种种bug和难以理解的代码的常见根源之一。尽管如此，宏在C语言中的作用却是无可替代的，作为C程序员只有理解了宏，才能正确的使用宏，真正了解代码中各类宏的含义，同时避免陷入各类宏陷阱当中。 宏的作用和处理时间 首先必须明白，宏的核心作用是给代码段以名字，然后用代码段去替代后续代码中名字出现的地方。 因此宏的实质就是文本替换，其操作由预处理器执行，在预处理处理注释之后。编译器的作用时间在预处理器之后，因此编译错误都是在宏展开后再进行检测的。 宏的两种类型 宏有两者类型：不带参数的宏和带参数的宏。不带参数的宏其性质多类似于对象，而带参数的宏其性质多类似于函数。 既然函数可以不带参数，因此也有部分不带参数的宏性质更类似于函数。 不带参数的宏 不带参数的宏其性... </summary> </entry> <entry><title>Go：函数</title><link href="https://gjqovo.github.io/posts/go-function/" rel="alternate" type="text/html" title="Go：函数" /><published>2022-09-19T15:46:16+00:00</published> <updated>2023-03-07T15:56:53+00:00</updated> <id>https://gjqovo.github.io/posts/go-function/</id> <content src="https://gjqovo.github.io/posts/go-function/" /> <author> <name>Gjq</name> </author> <category term="learn" /> <category term="golang" /> <summary> 引言 本文基于Go 1.19版本。 声明 Go语言中，函数的声明由名字、形参列表、返回列表（可选）和函数体构成，注意Go对代码格式要求比较严格： func name(parameter-list) (result-list) { body } 声明的组成成分 函数的名字和其他名字有着同样的规则，由字母或下划线开头，后面可以跟任意数量的字符、数字和下划线，并且区分大小写。 函数的形参列表由一组变量的参数名和参数类型构成。 函数的形参变量由函数的实参的值进行初始化，为函数最外层作用域的局部变量。 函数的返回列表制定了返回值的类型和名字（可选）。如果函数的没有返回值或只有一个未命名的返回值是，返回列表的圆括号可以省略。 命名的返回值会根据变量类型初始化为相应的0值，和形参变量一样，同为函数最外层作用域的局部变量。 存在返回列表时，无论返回值有没有得到命名，函数... </summary> </entry> <entry><title>Python中的对象</title><link href="https://gjqovo.github.io/posts/python-object/" rel="alternate" type="text/html" title="Python中的对象" /><published>2022-09-13T17:31:55+00:00</published> <updated>2022-09-21T12:27:25+00:00</updated> <id>https://gjqovo.github.io/posts/python-object/</id> <content src="https://gjqovo.github.io/posts/python-object/" /> <author> <name>Gjq</name> </author> <category term="learn" /> <category term="python" /> <summary> 引言 对象是Python 中对数据的抽象。Python程序中的所有数据都是由对象或对象间关系来表示的。 Python中，一切皆对象。 本文基于Python 3.10。 对象的组成 在Python中，任何对象都有各自的标识号、类型和值。 标识号（identity） 一个对象被创建后，其标识号就绝不会改变。通过id()函数可以返回代表对象标识号的整数，is运算符可以用于判断两个对象标识号是否相同。 我们可以将对象的标识号理解为该对象在内存中的地址，实际上，在CPython中，id(x)就是存放x的内存的地址。 类型（type） 对象的类型决定该对象所支持的操作并且定义了该类型的对象可能的取值。type()函数能返回一个对象的类型 (类型本身也是对象)。 与标识号一样，一个对象的类型通常是不可改变的。 文档脚注中提到： 在某些情况下有可能基于可控的条件改变一... </summary> </entry> <entry><title>Python内存</title><link href="https://gjqovo.github.io/posts/python-memory/" rel="alternate" type="text/html" title="Python内存" /><published>2022-09-12T12:47:01+00:00</published> <updated>2022-09-21T12:27:25+00:00</updated> <id>https://gjqovo.github.io/posts/python-memory/</id> <content src="https://gjqovo.github.io/posts/python-memory/" /> <author> <name>Gjq</name> </author> <category term="learn" /> <category term="python" /> <summary> 小整数对象池和大整数对象池 Python的解释机制和内存 PyFunctionObject </summary> </entry> </feed>
